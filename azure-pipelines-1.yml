# Process setup per JM
# https://montemagno.com/continuous-integration-delivery-for-net-libraries-with-vsts/

# Set buildnumber here and add versioningScheme: byBuildNumber to NugetCommand@2
name: 3.0.0$(rev:.r)

trigger:
- master

# From starter template
pool:
  vmImage: 'ubuntu-latest'

steps:

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 3.x'
  inputs:
    packageType: 'sdk'
    version: '3.x'
# JM specified version 4.5.1 but can use latest default
- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '4.5.1'

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: '86153590-b7da-4504-b416-f06a4b16a355'
    versioningScheme: byBuildNumber


- task: MSBuild@1
  inputs:
    solution: '**/XamarinFormsMvvmAdaptor.csproj'
    configuration: 'Release'
    msbuildArguments: '/t:restore;build;pack /p:PackageVersion=$(Build.BuildNumber)-beta /p:PackageOutputPath=$(build.artifactstagingdirectory)/beta /p:AssemblyFileVersion=$(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    arguments: '--configuration Release --collect:"XPlat Code Coverage"'
    publishTestResults: true
    projects: '**/*.UnitTests.csproj'

- script: |
    reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines -reporttypes:Badges
  displayName: 'Create code coverage report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'


- task: MSBuild@1
  inputs:
    solution: '**/XamarinFormsMvvmAdaptor.csproj'
    configuration: 'Release'
    msbuildArguments: '/t:restore;build;pack /p:PackageVersion=$(Build.BuildNumber) /p:PackageOutputPath=$(build.artifactstagingdirectory)/public  /p:AssemblyFileVersion=$(Build.BuildNumber)'

#Maybe you want to add unit test runners here

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: '**\bin\Release\**\*.nupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'